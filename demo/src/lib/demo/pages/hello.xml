<?xml version="1.0" encoding="UTF-8"?>
<html xmlns:ctl="red.web.ui.controls" xmlns:data="demo.data">
	<head>
		<title>Hello, World!</title>
	</head>
	<body>
		<a class="NoStyles" style="margin: -2em; float: right;" href="https://github.com/theredhead/red.web">
			<ctl:Image id="imgForkMe" imageHref="/img/forkme.png" alt="Fork me on github!"/>
		</a>

		<ctl:Form>
			<div>
				<ctl:Image id="imgLogo" imageHref="/img/logo.png" style="display: block; margin: 2em auto;"/>
			</div>

			<ctl:TabContainer autoPostback="true">
				<ctl:TabPage labelText="Hello">

                    <div style="background: -webkit-gradient(linear, left top, right bottom, from(rgb(222,222,222)), to(rgb(255,255,255))); border: inset 2px">
                        <h1>Some cool features in `red.web`</h1>

                        <ctl:Carousel width="640" height="300" easing="easeOutBack">
                            <ctl:CarouselContent>
                                <h2>Server side events</h2>
                                <p>
                                    We allow you to write code on the server that executes whenever something happens in the client.
                                </p>
                                <p>
                                    Your user presses a button in their browser, your code runs on the server.
                                </p>
                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Seperation of UI from logic</h2>
                                <p>
                                    From now on, you'll <strong>really</strong> be able to separate UI from logic.
                                    Every page will have a ui template and a class implementation. As an added bonus,
                                    all templates are fully localizable without disturbing the logic in the implementation.
                                </p>
                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Safe, easy data access</h2>
                                <p>
                                    We provide <a href="http://php.net/PDO">PDO</a> based connectors to
                                    <a href="http://www.mysql.com">mysql</a> and <a href="http://www.sqlite.org">sqlite</a>
                                    databases. Making it simple to use prepared statements and prevent any possible attack
                                    vector for sql injection from ever existing in your code.
                                </p>
                                <p>
                                    You can ofcourse still opt to use your favorite <a href="http://www.google.com/search?q=orm+tools">orm tools</a>
                                </p>
                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Rich collection of built-in controls</h2>
                                <ul>
                                    <li>Tables</li>
                                    <li>Repeaters</li>
                                    <li>Images</li>
                                    <li>Textboxes</li>
                                    <li>Buttons</li>
                                    <li>Carousels</li>
                                    <li>TabContainers</li>
                                </ul>
                                <p>
                                    And it's all themable.
                                </p>
                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Speedy</h2>
                                <p>
                                    Most speed optimization is made to cut development time. Because it's cheaper to add
                                    a server than to add a developer, a simple fact of life that is not likely to ever
                                    change. But at runtime the framework is no slouch either. The template parser is built
                                    on top of <a href="http://php.net/DOMDocument">DOMDocument</a> which is built on
                                    <a href="http://xmlsoft.org/">libxml</a> and <em>it is fast.</em>
                                </p>

                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Support for your favorites</h2>
                                <p>
                                    Do you like using <a href="http://daringfireball.net/projects/markdown/">Markdown</a>?
                                    <a href="http://www.smarty.net/">Smarty</a>? <a href="http://phptal.org/">PHPTAL</a>?
                                    you're in luck! red.web already supports Markdown and we'll be adding PHPTAL and
                                    Smarty support over the next few weeks.
                                </p>
                            </ctl:CarouselContent>
                        </ctl:Carousel>
                    </div>

                    <!--
                            <ctl:CarouselContent>
                                <h2>Databinding</h2>
                                <p>
                                    All our applications nowadays use data in one form or another. We've designed a simple
                                    method to give a control, or even an entire page, its data in one go. We bind it.
                                </p>
                                <p>
                                    Data sources are two way delegators, they know how to interact with your data and with
                                    the controls you use. Allowing the full range of CRUD operations for many types of
                                    controls and data, and easy for you to implement for your own data structures.
                                </p>
                                <p>
                                    Best of all, you can implement the delegation on your own controls that you can then
                                    embed directly into your pages markup. making many types of pages possible without a
                                    single line of code.
                                </p>
                            </ctl:CarouselContent>

                            <ctl:CarouselContent>
                                <h2>Minimum amount of code required</h2>
                                <p>
                                    A basic webpage doesn't require any implementation code. Just a class outline will do.
                                    If you want to be able to respond to button clicks or other changes to your pages' state
                                    all you need to do is implement a single method.
                                </p>
                                <p>
                                    As with all code, the less you need to write, the less bugs you potentially introduce.
                                </p>
                            </ctl:CarouselContent>
                    -->


                    <ctl:Image style="float:right;" id="imgScreenshot" imageHref="/img/screen-640.png" />

					<h1>Hello, World!</h1>
					<p>
						Hello and welcome to the demonstration page of the <code>red.web</code>
						framework for php.
					</p>
					<p>
						On these tabs you'll find a few widgets to play with that demonstrate the
						way this framework allows you to build web pages with hardly any code.
					</p>
					<p>
						In fact... the only code in this pages' class file is the event handling
						for the two buttons you see on this page and amounts to a mere handful of
						lines of code.
					</p>
					<p>
						The code does not change when you change the language, since that's just
						view information.
					</p>

					<hr style="border: none; color: transparent; clear: both;"/>

					<ul>
						<li>
							<p>
								<ctl:Button id="btnHello" caption="ï£¿ (Apple logo) is three bytes of UTF-8"/>
								<br />
								Clicking this button triggers the <code>onBtnHello_Clicked</code> handler. It
								does this without the need for glue code because autowiring of events is
								enabled.
							</p>
						</li>
						<li>
							<p>
								<ctl:Button id="btnCrash">Show me an error page!</ctl:Button>
								<br />
								This button triggers the <code>onBtnCrash_Clicked</code> handler which trows
								an exception so you can see what kind of information you can expect to see on
								a developers error page.
							</p>
						</li>
					</ul>

				</ctl:TabPage>
				<ctl:TabPage labelText="Table">
			
					<h2>Table</h2>
					<p>
						This table manages its own state as do all the controls, and it allows pagind when necesary.
					</p>
					<ctl:Table caption="SQLITE_MASTER" pageSize="5">
						<data:TestDatasource />
						<ctl:RowIndicatorColumn />
						<ctl:TableColumn key="type" headerText="Type" />
						<ctl:TableColumn key="name" headerText="Name" />
						<ctl:TableColumn key="sql" headerText="SQL" />
					</ctl:Table>

				</ctl:TabPage>
				<ctl:TabPage labelText="DataGrid">
					
					<h2>DataGrid</h2>
					<p>
						This DataGrid is very similar to the Table on the previous tab, but it is also sortable 
						and able to generate some events. Markup is otherwise identical to the Table.
					</p>
					<ctl:DataGrid id="DataGrid1" caption="SQLITE_MASTER" pageSize="5">
						<data:TestDatasource />
						<ctl:RowIndicatorColumn />
						<ctl:TableColumn key="type" headerText="Type" />
						<ctl:TableColumn key="name" headerText="Name" />
						<ctl:TableColumn key="sql" headerText="SQL" />
					</ctl:DataGrid>

				</ctl:TabPage>
				<ctl:TabPage labelText="Checks and Radios">



					<h2>A table with checkboxes</h2>
					<p>
						Just here to prove that state is maintained for checkboxes as well.
					</p>

                    <table>
                        <tr>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                        </tr>
                        <tr>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                        </tr>
                        <tr>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                            <td><ctl:Checkbox /></td>
                        </tr>
                    </table>

                    <ctl:RadioGroup caption="Some radio buttons">
                        <ctl:Radio labelText="Option 1"></ctl:Radio>
                        <ctl:Radio labelText="Option 2"></ctl:Radio>
                        <ctl:Radio labelText="Option 3"></ctl:Radio>
                        <ctl:Radio labelText="Option 4"></ctl:Radio>
                    </ctl:RadioGroup>

                    <ctl:RadioGroup caption="More radio buttons">
                        <ctl:Radio labelText="Option 1"></ctl:Radio>
                        <ctl:Radio labelText="Option 2"></ctl:Radio>
                        <ctl:Radio labelText="Option 3"></ctl:Radio>
                        <ctl:Radio labelText="Option 4"></ctl:Radio>
                    </ctl:RadioGroup>

				</ctl:TabPage>
				<ctl:TabPage labelText="TextBoxes">

					<h2>Textboxes</h2>
					<p>
						This page shows some different types of primitive textboxes.
					</p>
					<dl>
						<dt>Textbox</dt>
						<dd><ctl:Textbox /></dd>

						<dt>Multiple lines</dt>
						<dd><ctl:Textbox multipleline="true" rows="5" cols="40" /></dd>

						<dt>Password textbox</dt>
						<dd><ctl:PasswordTextbox /></dd>
					</dl>
					
				</ctl:TabPage>
				<ctl:TabPage labelText="Nested">
					<h2>Yes...</h2>
					<ctl:TabContainer autoPostback="false">
						<ctl:TabPage labelText="You can">
							<h2>Indeed</h2>
							<p>
								Since everything is a distinct object, from basic html tags to intricate controls,
								There is nothing stopping you from nesting multiple TabContainers.
							</p>
						</ctl:TabPage>
						<ctl:TabPage labelText="Another nested page">
							<h2>Although..</h2>
							<p>
								I wouldn't recommend it in most cases.
							</p>
							<ctl:TabContainer autoPostback="false">
								<ctl:TabPage labelText="You can">
									<h2>Indeed</h2>
									<p>
										Since everything is a distinct object, from basic html tags to intricate controls,
										There is nothing stopping you from nesting multiple TabContainers.
									</p>
								</ctl:TabPage>
								<ctl:TabPage labelText="Another nested page">
									<h2>Although..</h2>
									<p>
										I wouldn't recommend it in most cases.
									</p>
										<ctl:TabContainer autoPostback="false">
											<ctl:TabPage labelText="You can">
												<h2>Indeed</h2>
												<p>
													Since everything is a distinct object, from basic html tags to intricate controls,
													There is nothing stopping you from nesting multiple TabContainers.
												</p>
											</ctl:TabPage>
											<ctl:TabPage labelText="Another nested page">
												<h2>Really?...</h2>
												<p>
													It's getting silly.
												</p>
											</ctl:TabPage>
										</ctl:TabContainer>
								</ctl:TabPage>
							</ctl:TabContainer>
						</ctl:TabPage>
					</ctl:TabContainer>
				</ctl:TabPage>
				<ctl:TabPage labelText="Markdown">
					<ctl:StaticText markdown="true">

This is a page containing ![John Gruber](http://a3.twimg.com/profile_images/546338003/gruber-sxsw-final_normal.png)[Markdown](https://github.com/michelf/php-markdown/)
=======================================================================================================================================================================

Markdown is a neat way for writer types (as opposed to developer types) to "markup" content.
Originally implemented in (i believe) perl by John Gruber of [daringfireball](http://daringfireball.net) fame.
						
I hardly know enough about markdown to write something useful about it, but I know enough to
realize you can't really have a framework that doesn't support it.

Rather than reinvent the wheel, I opted to use a particularly good third party implementation
of the parser/transformer,  by [Michel Fortin](http://michelf.com/projects/php-markdown/extra/)
to integrate.

This `TabPage` contains a single `red.web.ui.controls.StaticText` control with the `isMarkDown` flag set to `true`.

					</ctl:StaticText>
				</ctl:TabPage>
				<ctl:TabPage labelText="Themes and language">
					<dl>
						<dt>Theme</dt>
						<dd>
							<ctl:DropdownList id="selTheme">
								<ctl:DropdownItem value="default">Default</ctl:DropdownItem>
								<ctl:DropdownItem value="simple">Simple</ctl:DropdownItem>
								<ctl:DropdownItem value="red">RED</ctl:DropdownItem>
							</ctl:DropdownList>
						</dd>

						<dt>Language</dt>
						<dd>
							<ctl:DropdownList id="selLanguage">
								<ctl:DropdownItem value="en-us">English</ctl:DropdownItem>
								<ctl:DropdownItem value="nl-nl">Dutch</ctl:DropdownItem>
							</ctl:DropdownList>
						</dd>
					</dl>
                </ctl:TabPage>
			</ctl:TabContainer>
		</ctl:Form>
		<br />
		<!-- iframe src="//www.facebook.com/plugins/like.php?href=https%3A%2F%2Fgithub.com%2Ftheredhead%2Fred.web&amp;send=false&amp;layout=standard&amp;width=450&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=80" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:80px;" allowTransparency="true"></iframe -->
	</body>
</html>